import{_ as a,o as t,c as p,b as n,d as s,f as e}from"./app-6f0fdc0f.js";const o={},c=n("h2",{id:"认识ecmascript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#认识ecmascript","aria-hidden":"true"},"#"),s(" 认识ECMAScript")],-1),i=n("p",null,[s("ECMAScript,简称 ES 。"),n("br"),s("它是JavaScript的标准化规范，定义了JavaScript的语法、类型、对象和运行时行为等方面的规则。")],-1),l=n("p",{align:"center"},[n("img",{class:"imageBorder",src:"https://bkimg.cdn.bcebos.com/pic/d009b3de9c82d15834a6cbdd890a19d8bc3e42b2?x-bce-process=image/resize,m_lfit,w_536,limit_1/format,f_auto",lazy:""})],-1),u=e(`<p>使用ECMAScript规范，JavaScript引擎（如V8引擎用于Chrome和Node.js）可以实现和支持规定的语言特性。<br> 开发人员可以根据规范来编写兼容不同JavaScript引擎的代码，并利用最新的语言功能来提高开发效率和代码质量。</p><p>ECMAScript规范的版本以ES开头，后面跟着版本号。<br><span style="color:red;">ES5</span>是目前广泛支持的稳定版本，而ES6（或ES2015）及其后续版本引入了许多新特性和语言增强。<br>随后的版本包括ES7、ES8、ES9、ES10、ES11和ES12，每个版本都引入了新的功能和语法。</p><h2 id="各版本增加的新特性" tabindex="-1"><a class="header-anchor" href="#各版本增加的新特性" aria-hidden="true">#</a> 各版本增加的新特性</h2><p>ES7、ES8、ES9、ES10、ES11和ES12是JavaScript的连续版本，也被称为ECMAScript的不同规范版本。<br> 下面我会详细介绍每个版本中新增的一些主要特性：</p><h3 id="es7-2016" tabindex="-1"><a class="header-anchor" href="#es7-2016" aria-hidden="true">#</a> ES7（2016）</h3><h4 id="array-prototype-includes" tabindex="-1"><a class="header-anchor" href="#array-prototype-includes" aria-hidden="true">#</a> Array.prototype.includes</h4><p>新增了Array.prototype.includes方法，用于检查数组是否包含特定的元素。<br>它返回一个布尔值，表示目标元素是否存在于数组中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数组中包含数字 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数组中不包含数字 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码使用includes方法检查numbers数组是否包含数字3。<br>如果包含，就输出&quot;数组中包含数字 3&quot;；如果不包含，就输出&quot;数组中不包含数字 3&quot;。</p><h4 id="指数操作符-exponentiation-operator" tabindex="-1"><a class="header-anchor" href="#指数操作符-exponentiation-operator" aria-hidden="true">#</a> 指数操作符（Exponentiation Operator）</h4><p>引入了指数操作符**，用于进行乘方运算。例如，2 ** 3将返回8，表示2的3次方。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码使用指数操作符**对2进行3次方运算，结果为8。</p><h4 id="object-values-object-entries" tabindex="-1"><a class="header-anchor" href="#object-values-object-entries" aria-hidden="true">#</a> Object.values/Object.entries</h4><p>新增了Object.values和Object.entries方法，用于返回对象属性的值数组和键值对数组。<br> Object.values返回对象的属性值数组，Object.entries返回一个包含对象属性键值对的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token literal-property property">occupation</span><span class="token operator">:</span> <span class="token string">&#39;Developer&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [&#39;John&#39;, 30, &#39;Developer&#39;]</span>

<span class="token keyword">const</span> entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 [[&#39;name&#39;, &#39;John&#39;], [&#39;age&#39;, 30], [&#39;occupation&#39;, &#39;Developer&#39;]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码使用Object.values方法返回了person对象的属性值数组，并使用Object.entries方法返回了person对象的键值对数组。</p><h3 id="es8-2017" tabindex="-1"><a class="header-anchor" href="#es8-2017" aria-hidden="true">#</a> ES8（2017）</h3><h4 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> Async/Await</h4><p>引入了async和await关键字，简化了异步编程，使得异步代码可以像同步代码一样易于阅读和编写。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展示了使用async和await关键字进行异步编程。<br> async函数返回一个Promise，允许在函数内使用await来等待异步操作的结果，使得异步代码的编写和理解更加直观和简洁。</p><h4 id="object-values-object-entries-1" tabindex="-1"><a class="header-anchor" href="#object-values-object-entries-1" aria-hidden="true">#</a> Object.values/Object.entries</h4><p>新增了Object.values和Object.entries方法，分别用于返回对象的值数组和键值对数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span>

<span class="token keyword">const</span> entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [[&quot;a&quot;, 1], [&quot;b&quot;, 2], [&quot;c&quot;, 3]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展示了Object.values和Object.entries方法的使用。<br> Object.values返回一个包含对象的所有值的数组，Object.entries返回一个包含对象的所有键值对的数组。</p><h3 id="es9-2018" tabindex="-1"><a class="header-anchor" href="#es9-2018" aria-hidden="true">#</a> ES9（2018）</h3><h4 id="异步迭代器-asynchronous-iteration" tabindex="-1"><a class="header-anchor" href="#异步迭代器-asynchronous-iteration" aria-hidden="true">#</a> 异步迭代器（Asynchronous Iteration）</h4><p>通过引入for-await-of循环，支持异步迭代器，使得处理异步数据流更加方便。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> asyncData <span class="token operator">=</span> <span class="token punctuation">{</span>
  async <span class="token operator">*</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncIterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token keyword">await</span> <span class="token function">someAsyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">await</span> <span class="token function">anotherAsyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> asyncData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="promise-prototype-finally" tabindex="-1"><a class="header-anchor" href="#promise-prototype-finally" aria-hidden="true">#</a> Promise.prototype.finally</h4><p>新增了Promise.prototype.finally方法，用于在Promise结束时执行回调，不论Promise的状态是成功还是失败。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&quot;Data fetched successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred while fetching data.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Promise execution completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es10-2019" tabindex="-1"><a class="header-anchor" href="#es10-2019" aria-hidden="true">#</a> ES10（2019）</h3><h4 id="array-prototype-flat-flatmap" tabindex="-1"><a class="header-anchor" href="#array-prototype-flat-flatmap" aria-hidden="true">#</a> Array.prototype.flat/flatMap</h4><ul><li>Array.prototype.flat方法用于将多维数组扁平化为一维数组。</li><li>Array.prototype.flatMap方法结合了map和flat，可以在映射数组的同时进行扁平化。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> flatArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flatArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, [3, 4]]</span>

<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mappedArray <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mappedArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [2, 4, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-fromentries" tabindex="-1"><a class="header-anchor" href="#object-fromentries" aria-hidden="true">#</a> Object.fromEntries</h4><p>引入了Object.fromEntries方法，用于将键值对数组转换为对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;city&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;New York&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> person <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;John&#39;, age: 30, city: &#39;New York&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es11-2020" tabindex="-1"><a class="header-anchor" href="#es11-2020" aria-hidden="true">#</a> ES11（2020）</h3><h4 id="nullish-coalescing-operator" tabindex="-1"><a class="header-anchor" href="#nullish-coalescing-operator" aria-hidden="true">#</a> Nullish Coalescing Operator</h4><p>引入了??空值合并运算符，用于提供默认值的情况下，仅当变量为null或undefined时才使用默认值。<br> 比方说，假设我们有一个变量username，我们希望在username为null或undefined时使用默认值&quot;Guest&quot;：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> displayName <span class="token operator">=</span> username <span class="token operator">??</span> <span class="token string">&quot;Guest&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>displayName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;Guest&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，因为username的值为null，所以使用了默认值&quot;Guest&quot;赋给displayName变量。</p><h4 id="optional-chaining-operator" tabindex="-1"><a class="header-anchor" href="#optional-chaining-operator" aria-hidden="true">#</a> Optional Chaining Operator</h4><p>可选链操作符（?.）用于简化访问深层嵌套属性或方法时的空值检查。</p><p>比方说，我们有一个对象user，其中包含了一个address对象，而address对象中又有一个street属性。<br>我们想要安全地访问street属性，即使user或address中的任何一个为空：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> streetName <span class="token operator">=</span> user<span class="token operator">?.</span>address<span class="token operator">?.</span>street<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>streetName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，由于address为null，所以访问street属性的操作返回了undefined，而不是抛出错误。</p><h3 id="es12-2021" tabindex="-1"><a class="header-anchor" href="#es12-2021" aria-hidden="true">#</a> ES12（2021）</h3><h4 id="promise-any" tabindex="-1"><a class="header-anchor" href="#promise-any" aria-hidden="true">#</a> Promise.any()</h4><p>方法接受一个 Promise 数组，返回其中最先达成状态的 Promise 对象。<br> 如果所有 Promise 都变成了 rejected 状态，则返回一个 AggregateError 对象，其中包含所有 Promise 的 rejection 原因。<br> 这个方法可以简化处理 Promise 数组的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>
  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Error 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;Success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Error 2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，由于第二个 Promise 最先达成 fulfilled 状态，因此 Promise.any() 返回了它的值 &#39;Success&#39;。</p><h4 id="logical-assignment-operators" tabindex="-1"><a class="header-anchor" href="#logical-assignment-operators" aria-hidden="true">#</a> Logical Assignment Operators</h4><p>ES12 中引入了三个逻辑赋值运算符：&amp;&amp;=、||= 和 ??=。<br> 这些运算符结合了逻辑运算符和赋值运算符的功能，可以简化某些常见的编程模式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

a <span class="token operator">&amp;&amp;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// a 等于 10</span>
b <span class="token operator">||=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// b 等于 20</span>
c <span class="token operator">??=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">// c 等于 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，&amp;&amp;= 运算符将 a 赋值为 10，因为 a 的初始值为 5，而 5 是一个 truthy 值。，<br> ||= 运算符将 b 赋值为 20，因为 b 的初始值为 null，null 是一个 falsy 值。<br> ??= 运算符将 c 赋值为 30，因为 c 的初始值为 undefined，undefined 是一个 falsy 值。</p><h4 id="string-prototype-replaceall" tabindex="-1"><a class="header-anchor" href="#string-prototype-replaceall" aria-hidden="true">#</a> String.prototype.replaceAll()</h4><p>方法可以用来替换字符串中所有匹配的子串。<br>这个方法接受两个参数：一个需要被替换的子串和一个替换的子串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;L&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// newStr 等于 &#39;heLLo worLd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="weakrefs" tabindex="-1"><a class="header-anchor" href="#weakrefs" aria-hidden="true">#</a> WeakRefs</h4><p>ES12 中新增了 WeakRefs，这是一种新的引用类型，可以用来创建弱引用。<br> 与普通引用不同，弱引用不会防止其指向的对象被垃圾回收。这可以解决一些内存泄漏的问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在某个时刻后，obj 可能被垃圾回收了，但是 ref 仍然存在</span>
<span class="token comment">// 我们可以通过 ref.deref() 方法来获取 obj，如果 obj 已经被回收了，则返回 undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h3><p>这些特性的引入丰富了JavaScript的语言功能，使开发者能够更方便地操作数组和对象，并提供了更灵活的数学运算能力。</p><p>需要注意的是，ECMAScript规范和JavaScript运行环境之间可能存在差异，特别是在旧版本的JavaScript环境中，可能不支持最新的ECMAScript特性。</p><p>因此，在编写JavaScript代码时，需要考虑目标运行环境的支持情况，或者使用转译工具（如Babel）将较新版本的代码转换为较旧版本的兼容代码，以确保在不同环境中的兼容性。</p>`,69),r=[c,i,l,u];function k(d,v){return t(),p("div",null,r)}const b=a(o,[["render",k],["__file","ECMAScript.html.vue"]]);export{b as default};
