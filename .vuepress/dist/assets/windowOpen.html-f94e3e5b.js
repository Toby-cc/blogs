import{_ as t,a as p,o as e,c as o,f as n,h as c,b as i,i as s}from"./app-5e744d50.js";const l={},r=s(`<h2 id="了解-window-open" tabindex="-1"><a class="header-anchor" href="#了解-window-open" aria-hidden="true">#</a> 了解 window.open()</h2><blockquote><p>window.open() 是 JavaScript 中的一个方法，用于在浏览器中打开新的窗口或标签页。<br>它接受一个 URL 参数，指定要在新窗口中打开的网页地址。</p></blockquote><div><div>基本语法如下：</div><span style="color:red;">window.open(url, target, features, replace);</span></div><ul><li>url：表示要在新窗口中打开的网页的 URL 地址。</li><li>target（可选）：指定新窗口的目标。常见的值包括： <ul><li>blank：在新标签页中打开。</li><li>self：在当前窗口中打开（默认行为）。</li><li>parent：在父级窗口或框架中打开。</li><li>top：在最顶层的窗口中打开。</li></ul></li><li>features（可选）：一个逗号分隔的字符串，用于指定新窗口的特性，例如大小、位置、工具栏、菜单等。具体的特性值取决于浏览器的支持和实现。</li><li>replace（可选）：一个布尔值，指示新窗口是否替换当前窗口的浏览历史记录。默认为 false，不替换浏览历史记录。</li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>window.open() 可以应用于各种场景，包括但不限于以下几种常见用法：</p><h3 id="场景一" tabindex="-1"><a class="header-anchor" href="#场景一" aria-hidden="true">#</a> 场景一：</h3><blockquote><p>在新标签页中打开链接：可以使用 window.open() 在用户点击链接时在新标签页中打开一个链接。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;https://www.baidu.com/&quot;</span> target<span class="token operator">=</span><span class="token string">&quot;_blank&quot;</span> onclick<span class="token operator">=</span><span class="token string">&quot;event.preventDefault(); window.open(this.href, &#39;_blank&#39;);&quot;</span><span class="token operator">&gt;</span>打开链接<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="场景二" tabindex="-1"><a class="header-anchor" href="#场景二" aria-hidden="true">#</a> 场景二：</h3><blockquote><p>弹出窗口：可以使用 window.open() 创建一个自定义的弹出窗口，例如用于显示用户认证、消息通知或其他交互性内容。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;popup.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;popupWindow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;width=400,height=300&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="场景三" tabindex="-1"><a class="header-anchor" href="#场景三" aria-hidden="true">#</a> 场景三：</h3><blockquote><p>跨域通信：可以使用 window.open() 在两个不同域名的页面之间进行通信，通过在目标页面中使用 window.opener 访问源页面的上下文。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 源页面</span>
<span class="token keyword">var</span> popup <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;target.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;targetWindow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 目标页面</span>
window<span class="token punctuation">.</span>opener<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="场景四" tabindex="-1"><a class="header-anchor" href="#场景四" aria-hidden="true">#</a> 场景四：</h3><blockquote><p>引导用户进行第三方认证：可以使用 window.open() 在新窗口中打开第三方认证页面，然后在认证完成后返回认证结果给原页面。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> authWindow <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;https://auth-provider.com/login&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;authWindow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在第三方认证页面中认证完成后执行以下代码</span>
<span class="token keyword">var</span> authToken <span class="token operator">=</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 获取认证令牌</span>

authWindow<span class="token punctuation">.</span>opener<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;authComplete&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">token</span><span class="token operator">:</span> authToken <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),u=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,"需要注意的是，由于浏览器的安全策略，window.open() 方法在某些情况下可能受到限制。")],-1),d=s(`<h2 id="需要注意的问题" tabindex="-1"><a class="header-anchor" href="#需要注意的问题" aria-hidden="true">#</a> 需要注意的问题</h2><blockquote><p>以下是一些需要注意的安全策略：</p></blockquote><p>1、弹出窗口被浏览器拦截：现代浏览器通常会对弹出窗口进行拦截和阻止，特别是在未经用户交互的情况下。这是为了防止滥用和恶意弹出窗口，以保护用户的浏览体验和安全性。<br></p><p>2、广告拦截器的影响：一些广告拦截器工具和浏览器插件可能会将 window.open() 视为潜在的广告弹出窗口，并将其阻止或过滤。<br></p><p>3、弹出窗口被阻止后无法捕获：如果浏览器拦截了 window.open() 弹出的窗口，JavaScript 代码将无法捕获此事件，也无法获得对新窗口的引用。<br></p><p>4、同源策略限制：在跨域情况下，由于同源策略的限制，父页面与弹出窗口之间的通信可能受到限制。跨域的弹出窗口无法直接访问父页面的 DOM 或执行脚本。<br></p><p>5、弹出窗口的设计和用户体验：弹出窗口的使用应该谨慎，并考虑用户体验。弹出窗口可能会打断用户的浏览流程，对于移动设备或小屏幕设备，弹出窗口可能导致不良的用户体验。<br></p><p>6、安全风险：如果不正确使用 window.open()，可能会存在安全风险，例如通过弹出窗口进行钓鱼攻击、注入恶意脚本等。在使用 window.open() 时，应注意验证和过滤用户提供的数据，避免潜在的安全漏洞。<br></p><blockquote><p>为了遵守浏览器的安全策略，使用 window.open() 方法时，建议遵循以下最佳实践：</p></blockquote><ul><li>在用户交互的上下文中使用：例如，在按钮点击事件或用户操作后调用 window.open()。<br></li><li>提供有用的内容：确保弹出的窗口或标签页中提供有用的内容，而不是仅仅用于广告或欺诈目的。<br></li><li>提示用户：向用户解释为什么打开新窗口或标签页，并给出清晰的指示。<br></li><li>尊重用户的选择：如果浏览器阻止了弹出窗口，不要尝试绕过阻止机制，而是尊重用户的选择。<br></li></ul><p>总之，使用 window.open() 时请注意遵守浏览器的安全策略，以确保用户安全和良好的用户体验。</p><h2 id="讨论一个问题" tabindex="-1"><a class="header-anchor" href="#讨论一个问题" aria-hidden="true">#</a> 讨论一个问题</h2><blockquote><p>前段时间遇到个问题<br> 需求是需要调用接口，服务端返回二进制数据对象(Blob),然后我把它下载到本地。<br> 其实很简单，实现的方法也很多。先看看我写的代码：</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">&#39;qs&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数对象</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> apiUrl <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_URL</span> <span class="token keyword">as</span> string<span class="token punctuation">;</span>
<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>apiUrl<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/edu/entrance/resume/export?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&quot;newWindow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我使用了 qs 库来将参数对象转换为查询字符串。<br> 然后，我们将查询字符串附加到 API URL 中，形成完整的导出文件的 URL。<br> 最后，使用 window.open() 方法在新窗口中打开该 URL。<br></p><blockquote><p>这样写其实也没有毛病，直到发到正式环境用了个把月之后<br> 服务端突然找我说：我改接口了，现在这个接口需要请求头传 Token 。<br> 我：. . .<br> (说明一下，因为只有管理员才能触发这个下载按钮的事件，而整个项目管理员才不到三个，而且都是公司自己人。<br> 所以当初才没有带参就调用。正是因为只有我才选择使用 window.open()。<br>即省事又方便嘛！DDDD😂)</p></blockquote><p>虽然不清楚为什么上线个把月之后服务端才说要接口要传 Token。<br> 不过问题也不大，改就改呗。</p><p>秉着能省就省，用最少的代码量写最好的程序的原则。我突然有种想法：<br> 能不能在原有基础上直接加上请求头参数，方便又快捷，心里美滋滋。🤔</p><p>后来发现，是我的想法天真了。😑</p>`,19),k=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,"window.open()并不提供直接设置请求头的方法")],-1),v=s(`<p>它主要用于在浏览器中打开新的窗口或标签页，并导航到指定的 URL 地址。</p><p>如果想在打开的新窗口或标签页中发送带有特定请求头的请求，就需要考虑使用其他方法。<br> 如使用 JavaScript 的 XMLHttpRequest 或 Fetch API 进行请求。<br> 这些方法允许我们更精细地控制请求，包括设置请求头。</p><p>唉~ 所以只能改了。<br> 最后改成了API请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">&#39;qs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> api <span class="token keyword">from</span> <span class="token string">&#39;@/api&#39;</span> <span class="token comment">// 封装的api</span>

<span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 参数对象</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> apiUrl <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_API_URL</span> <span class="token keyword">as</span> string<span class="token punctuation">;</span>
<span class="token comment">// const url = \`\${apiUrl}/edu/entrance/resume/export?\${qs.stringify(params)}\`;</span>
<span class="token comment">// window.open(url, &quot;newWindow&quot;);</span>
api<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>params<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">blob</span><span class="token operator">:</span> Blob <span class="token operator">|</span> MediaSource</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  link<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>
  link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">&#39;导出文件.xlsx&#39;</span><span class="token punctuation">;</span>

  <span class="token comment">// 添加 &lt;a&gt; 元素到页面，并触发点击事件</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
  link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 清理资源</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(b,w){const a=p("svgIcon");return e(),o("div",null,[r,u,d,k,v,n("p",null,[c("因为这件事特意把window.open()重新了解了一遍，其实也不错。"),i(a,{name:"T-xin1"})])])}const g=t(l,[["render",m],["__file","windowOpen.html.vue"]]);export{g as default};
